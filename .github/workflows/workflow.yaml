name: Release VSCode Extension

# 触发条件：当推送符合 'v*.*.*' 格式的标签时触发
on:
  push:
    tags:
      - 'v*.*.*'  # 例如 v1.0.0, v2.1.3 等
  workflow_dispatch:  # 允许手动触发

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
      # 1. 检出代码仓库
      - name: Checkout Repository
        uses: actions/checkout@v3

      # 2. 全局安装 pnpm
      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          version: 10
          run_install: false

      # 3. 设置 Node.js 环境并缓存 pnpm 依赖
      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      # 4. 安装项目依赖
      - name: Install Dependencies
        run: pnpm install

      # 5. 打包 VSCode 扩展
      - name: Package VSCode Extension
        run: pnpm run vscode:package

      # 6. 生成 Changelog（仅包含 feat 和 fix 类型的提交）
      - name: Generate Changelog
        id: generate_changelog
        run: |
          echo "## Changelog" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          # 获取当前标签
          CURRENT_TAG=${GITHUB_REF#refs/tags/}
          # 获取上一个标签
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^)
          echo "Comparing from $PREVIOUS_TAG to $CURRENT_TAG"
          # 使用 git log 获取 feat 和 fix 类型的提交
          git log $PREVIOUS_TAG..$CURRENT_TAG --pretty=format:"- %s" --grep="^feat:" --grep="^fix:" >> CHANGELOG.md
          # 读取 CHANGELOG.md 内容并设置为输出
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          cat CHANGELOG.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      # 7. 创建 GitHub Release
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}  # 使用当前的标签名
          release_name: Release ${{ github.ref_name }}
          body: ${{ steps.generate_changelog.outputs.changelog }}
          draft: false
          prerelease: false

      # 8. 上传 .vsix 文件到 Release 作为资产
      - name: Upload VSIX to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./*.vsix
          asset_name: your-extension.vsix  # 你可以根据需要动态命名
          asset_content_type: application/octet-stream
